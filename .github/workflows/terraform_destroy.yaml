name: Terraform Destroy Workflow

# https://blog.testdouble.com/posts/2021-12-07-elevate-your-terraform-workflow-with-github-actions/

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS Region to use"
        required: true
      aws_bucket_name:
        description: "AWS S3 Bucket to store TF States"
        required: true
      aws_bucket_key_path:
        description: "AWS S3 Bucket Key Path to store state"
        required: true
        default: "state/terraform.tfstate"
      aws_access_key_id:
        description: "Access key id to access AWS"
        required: true
      aws_secret_access_key:
        description: "Secret access key to access AWS"
        required: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.5

      - name: Run terraform fmt check
        run: terraform fmt -check -diff -recursive ./infra/ec2

  plan_and_destroy:
    name: Plan and Destroy
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ github.event.inputs.aws_region }}
          aws-access-key-id: ${{ github.event.inputs.aws_access_key_id }}
          aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key }}

      - name: Run key pair generator script
        run: |
          cd ./infra/ec2
          sed -i "s/<BUCKET_NAME>/${{ github.event.inputs.aws_bucket_name }}/g" provisioning/create_key_pair.sh
          aws s3 ls s3://skysports-my-tf-states/keys/ubuntu_ec2.pem
          if [[ $? -ne 0 ]]; then
              echo "it does not exist, creating a fresh key pair and uploading"
              ssh-keygen -t rsa -b 2048 -f /home/runner/ubuntu_ec2.pem -q -P ''
              ssh-keygen -y -f /home/runner/ubuntu_ec2.pem > /home/runner/ubuntu_ec2.pub
              aws s3api put-object --bucket skysports-my-tf-states --key keys/ubuntu_ec2.pem --body /home/runner/ubuntu_ec2.pem
              aws s3api put-object --bucket skysports-my-tf-states --key keys/ubuntu_ec2.pub --body /home/runner/ubuntu_ec2.pub
          else
              echo "it exists, downloading existing"
              echo "y" | aws s3api get-object --bucket skysports-my-tf-states --key keys/ubuntu_ec2.pem /home/runner/ubuntu_ec2.pem
              echo "y" | aws s3api get-object --bucket skysports-my-tf-states --key keys/ubuntu_ec2.pub /home/runner/ubuntu_ec2.pub
          fi

          chmod 400 /home/runner/ubuntu_ec2.pem
          chmod 400 /home/runner/ubuntu_ec2.pub

      - name: Setup bucket
        run: |
          cd ./infra/ec2
          sed -i "s/<BUCKET_NAME>/${{ github.event.inputs.aws_bucket_name }}/g" terraform.tf
          sed -i "s/<AWS_REGION>/${{ github.event.inputs.aws_region }}/g" terraform.tf
          sed -i "s/<BUCKET_KEY_PATH>/${{ github.event.inputs.aws_bucket_key_path }}/g" terraform.tf

      - name: Initialize Terraform
        run: |
          cd ./infra/ec2
          terraform init -input=false

      - name: Plan Terraform
        id: plan
        run: |
          cd ./infra/ec2
          terraform plan -input=false

      - name: Destroy Terraform
        # if: steps.plan.outcome == 'success'
        id: destroy
        run: |
          cd ./infra/ec2
          terraform destroy -input=false -auto-approve
